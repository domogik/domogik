==========================
Controller & devices tools
==========================

.. |menu2| image:: ozwave_menu-ctrldev.png
    :width: 500px

|menu2|

Get Zwave controller informations
=================================

.. |check-ctrl1| image:: ozwave_check-ctrl1.png
    :width: 600px

.. |bt-refresh-ctrl| image:: ozwave_btrefresh-ctrl.png
    :width: 60px

- you can check to verify the information on zwave network state and controller in the first part of the page.

|check-ctrl1|

The status information can be refreshed using button. |bt-refresh-ctrl|

Get Zwave devices (Nodes) informations
======================================

.. note ::
   On a zwave system, devices are called **Nodes**.

- **Devices initialisation** field give state of global initialize process.

The process can take a long time (up to 5 min). Be patient.....
All nodes discovered and / or stored are scanned one by one to be initialized.

.. |check-dev1| image:: ozwave_check-dev1.png
    :width: 600px

|check-dev1|

The status information can be refreshed using button. |bt-refresh-ctrl|

.. |progess-state1| image:: ozwave_progess-state1.png
    :width: 150px

.. |progess-state2| image:: ozwave_progess-state2.png

.. |battery-level| image:: ozwave_battery-level.png

.. |awake1| image:: ozwave_awake1.png

.. |awake2| image:: ozwave_update-sleep.png
    :width: 150px

.. |det-type| image:: ozwave_detail-type.png
    :width: 150px

.. |cmd_node| image:: ozwave_cmd_node.png

.. |refr-node-inf| image:: ozwave_refresh-node-info.png

+------------------+------------------------------------+----------------------------------------------------------------------------------------------------+
| Representation   | Message                            | Description                                                                                        |
+==================+====================================+====================================================================================================+
|                  | **Pointing the mouse over icon in column "NodeId" give status of initializing.**                                                        |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
| |progess-state1| | Uninitialized                      | No starting init operation.                                                                        |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Initialized - not known            | Node has completed init, but openzwave don't know is model (shows xml openzwave files).            |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Completed                          | Node has full completed init.                                                                      |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | In progress - Can receive messages | Node can now receive messages, but his initialization not finish.                                  |
|                  | (Not linked)                       | Probably node sleeping. Controller have finish init, when node awake it state should be Completed. |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
| |progess-state2| | In progress - Linked to controller | Node is recognize by controller, initialization is in progress.                                    |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | In progress - Can receive messages | Node can now receive messages, but initialization not finish.                                      |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Out of operation                   | Node is mark as failed, controller don't find him.                                                 |
+------------------+------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | **Pointing the mouse over battery icon in column "NodeId" give status of battery level.**                                               |
| |battery-level|  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Value in %                         | Fill icon picture level of battery.                                                                |
+------------------+------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | **Pointing the mouse over icon in column "Awake" give status of listening mode.**                                                       |
| |awake1|         +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Awake                              | Node is awake, message can send immediately.                                                       |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
| |awake2|         | Sleeping                           | Node probably sleeping, message are put on send queue.                                             |
+------------------+------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | **Pointing the mouse over icon in column "Type" give capacities of node.**                                                              |
| |det-type|       +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  |                                    | Node is primary controller, is the main device used to configure and control a Z-Wave network.     |
|                  | Primary Controller                 |                                                                                                    |
|                  |                                    | The only difference between a primary and secondary controller is that the primary is the only one |
|                  |                                    | that can be used to add or remove other devices.                                                   |
|                  |                                    |                                                                                                    |  
|                  |                                    | For this reason, it is usually better for the primary controller to be portable, since most        |
|                  |                                    | devices must be added when installed in their final location.                                      |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Secondary Controller               | There can only be one primary controller - all other controllers are secondary controllers.        |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Static Update Controller           | A Static Update Controller (SUC) is a controller that must never be moved in normal operation      |
|                  |                                    | and which can be used by other nodes to receive information about network changes.                 |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Bridge Controller                  | A bridge controller is able to create virtual nodes that can be associated with other controllers  |
|                  |                                    | to enable events to be passed on.                                                                  |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Routing                            | Node is a routing device that passes messages to other nodes.                                      |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Listening                          | Node is a setening device that does not go to sleep.                                               |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Beaming                            | Node is a beam capable device..                                                                    |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Security                           | Node supports security features.                                                                   |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | FLiRS                              | Node is a frequent setening device that goes to sleep but can be woken up by a beam.               |
|                  |                                    | Useful to determine node and controller consistency..                                              |
+------------------+------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | **Buttons on column "Action" get access of others commands on nodes.**                                                                  |
| |cmd_node|       +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Detail Node                        | Show/hide command class capacities table.                                                          |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Update Node                        | Send to node **Name** and **Location** field to update it.                                         |
|                  |                                    |                                                                                                    |
|                  |                                    | Saving modification in config file with "Save config" button                                       |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Edit association                   | Manage groups association.                                                                         |
|                  +------------------------------------+----------------------------------------------------------------------------------------------------+
|                  | Force Refresh Node                 | Causes the nodes data to be obtained from the Z-Wave network in the same way as if it had just been|
|                  |                                    | added. This method would normally be called automatically by OpenZWave, but if you know that a node|
|                  | |refr-node-inf|                    | has been changed, calling this method will force a refresh of the data held by the library.        |
|                  |                                    | This can be especially useful for devices that were asleep when the application was first run.     |
|                  |                                    |                                                                                                    |
|                  |                                    | Three options possible :                                                                           |
|                  |                                    |  - Node informations : Fetch the data for a node from the Z-Wave network                           |
|                  |                                    |  - State Node : Fetch the command class data for a node from the Z-Wave network                    |
|                  |                                    |  - Dynamics data : Fetch only the dynamic command class data for a node from the Z-Wave network.   |
+------------------+------------------------------------+----------------------------------------------------------------------------------------------------+

Manage association devices (groups)
===================================

.. |grp-dialog-bt| image:: ozwave_grp-dialog-bt.png

- Some devices have the ability to be combined with other devices and can send their information.
- These associations are using groups, access to the dialog management groups is done with the button |grp-dialog-bt|

.. |grp-dialog| image:: ozwave_grp-dialog.png
    :width: 500px

|grp-dialog|

how to use management associations
----------------------------------

.. note ::

      - Due to the possibility of sleeping devices, the system considers the command to have been transmitted.
      - In the case of a device sleeping command will be transmitted when the device wakes up.
      - So the association will be effective as this momment there.

      .. warning ::

          Careful if the plugin is stopped between  time command is lost.

- An icon indicates the status of the device in the group, it may be : 

     - unknown
     - confirmed
     - to confirm
     - to update

- The operations are performed by simply drag and drop.
- After making the changes click on **OK** to send at the device.
- To quit dialog box click **Cancel**.
- Actually button **Reset** is not handled.

.. |grp-dialog1| image:: ozwave_grp-dialog1.png

.. |grp-dialog2| image:: ozwave_grp-dialog2.png

.. |grp-dialog3| image:: ozwave_grp-dialog3.png

.. |grp-dialog4| image:: ozwave_grp-dialog4.png

+---------------+---------------------------------------------------------------------------------+
| Example       | Description                                                                     |
+===============+=================================================================================+
| |grp-dialog1| | If you drop at bad placement a icon forbidden is show.                          |
+---------------+---------------------------------------------------------------------------------+
| |grp-dialog2| | When you drop in a group who device ins'it to add it, a icon plus is show.      |
+---------------+---------------------------------------------------------------------------------+
| |grp-dialog3| | After adding device in group, a icon to update is show.                         |
+---------------+---------------------------------------------------------------------------------+
| |grp-dialog4| | If you drop at bad placement a icon forbidden is show.                          |
+---------------+---------------------------------------------------------------------------------+

Manage devices Commands Class
=============================

Display commands class list
---------------------------

- All command class are listed in a table.

.. |tab-cmdclass1| image:: ozwave_tab-cmdclass1.png
    :width: 750px

|tab-cmdclass1|

Change values of command class
------------------------------

- You can edit the values that are in writing, if the value is changed one "Edit" button appears, you must click it to send change at device
- If exist, pointing the mouse over icon "i" give information about command-class.

.. |tab-cmdclass2| image:: ozwave_tab-cmdclass2.png
    :width: 650px

|tab-cmdclass2|

- When a value of command class is updated, she his tagged during 5 secondes. Pointing the mouse over value give date of update.

.. |update-cmdclass| image:: ozwave_update-cmdclass.png
    :width: 750px

|update-cmdclass|

Poll service
------------

- Modern devices will not require polling. Some old devices need to be polled as the only way to detect status changes.
- Due to patent concerns, some devices do not report state changes automatically to the controller.

These devices need to have their state polled at regular intervals. The length of the interval is the same for all devices.
To even out the Z-Wave network traffic generated by polling, OpenZWave divides the polling interval by the number of devices that have polling enabled, and polls each in turn.  It is recommended that if possible, the interval should not be set shorter than the number of polled devices in seconds (so that the network does not have to cope with more than one poll per second).

Set time interval
^^^^^^^^^^^^^^^^^

- Set in seconds global interval, click send button to confirm.

.. |manage-plugin| image:: ozwave_menu-manage-plugin.png

|manage-plugin|

Polling a command class
^^^^^^^^^^^^^^^^^^^^^^^

.. |tab-cmdclass3| image:: ozwave_tab-cmdclass3.png
    :width: 750px

.. |polling-dialog| image:: ozwave_polling-dialog.png

- In first column a check box give access to poll value.

|tab-cmdclass3|

- A dialog box appeared to confirme action. Here check if polled and set intensity, the number (frequency) of poll during global interval.

|polling-dialog|

.. warning ::
   - Polling sleeping devices put openzwave library in waiting confirmation. This could raise a network error.
   - Using an intensity value more 2 could raise a network error.

.. todo:: 
    Screen shoot and explanations of other functions......

Drivers and controller commands
===============================

.. |ctrl-cmd-bts| image:: ozwave_ctrl-cmd-bts.png

In this section, orders can be sent directly to the driver

|ctrl-cmd-bts|

Stop and Start driver (controller)
----------------------------------

.. |ctrl-start-bt| image:: ozwave_ctrl-start-bt.png

.. |ctrl-stop-bt| image:: ozwave_ctrl-stop-bt.png

.. |ctrl-stop-dlg| image:: ozwave_ctrl-stop-dialog.png

Driver automatically starts and start/stop button automatically changes depending on the state of the driver. 

- You can stop it when it's possible : |ctrl-stop-bt|

confimation dialog aks you to continue.

|ctrl-stop-dlg|

- You can Start it when it's possible : |ctrl-start-bt|

Initialization process running, you must be patient ....

Controller commands and actions
-------------------------------

.. |ctrl-action-bt| image:: ozwave_ctrl-action-bt.png

.. |ctrl-action-dialog| image:: ozwave_ctrl-action-dialog.png
    :width: 250px

- You access to dialog box by button |ctrl-action-bt| 

|ctrl-action-dialog|

Actions process
^^^^^^^^^^^^^^^

- This modal dialog contains informations to guide the user.
- Just actions "CreateButton" and "DeleteButton" are not implemented yet.

+---------------------------+------------------------------------------------------------------------------------------------------------+
| Action / command          | Description                                                                                                |
+===========================+============================================================================================================+
| AddDevice                 | Add a new device (but not a controller) to the Z-Wave network.                                             |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| CreateNewPrimary          | Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current       |
|                           | primary will become a secondary controller.                                                                |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| ReceiveConfiguration      | Receive Z-Wave network configuration information from another controller.                                  |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| RemoveDevice              | Remove a new device (but not a controller) from the Z-Wave network.                                        |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| RemoveFailedNode          | Move a node to the controller's failed nodes list. This command will only work if the node cannot respond. |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| HasNodeFailed             | Check whether a node is in the controller's failed nodes list.                                             |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| ReplaceFailedNode         | Replace a non-responding node with another. The node must be in the controller's list of failed nodes for  |
|                           | this command to succeed.                                                                                   |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| TransferPrimaryRole       | Make a different controller the primary.                                                                   |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| RequestNetworkUpdate      | Request network information from the SUC/SIS.                                                              |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| RequestNodeNeighborUpdate | Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors.   |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| AssignReturnRoute         | Assign a network return routes to a device.                                                                |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| DeleteAllReturnRoutes     | Delete all return routes from a device.                                                                    |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| SendNodeInformation       | Send a node information frame.                                                                             |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| ReplicationSend           | Send information from primary to secondary.                                                                |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| CreateButton              | Create an id that tracks handheld button presses.                                                          |
+---------------------------+------------------------------------------------------------------------------------------------------------+
| DeleteButton              | Delete id that tracks handheld button presses.                                                             |
+---------------------------+------------------------------------------------------------------------------------------------------------+

Schematic processing
^^^^^^^^^^^^^^^^^^^^

- Each action have differents step, some will attempt user action on device, some will take a long time, some must be stop manually.
- You can stop action, but stop result have some time a fail report.

.. |ctrl-action-process| image:: ozwave_ctrl-action-process.png
    :width: 650px

|ctrl-action-process|

Reset controller
----------------

.. |ctrl-reset-bt| image:: ozwave_ctrl-reset-bt.png

- Two mode possible with acces by buttons : |ctrl-reset-bt|

Soft reset
^^^^^^^^^^

.. |ctrl-reset-dialog1| image:: ozwave_ctrl-reset-dialog1.png

- Soft Reset a PC Z-Wave Controller who resets a controller without erasing its network configuration settings

|ctrl-reset-dialog1|


Hard reset
^^^^^^^^^^

.. |ctrl-reset-dialog2| image:: ozwave_ctrl-reset-dialog2.png

.. warning ::
   Be careful this action is irreverssible

|ctrl-reset-dialog2|

